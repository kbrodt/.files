global !p

from helper import (
	math,
	create_matrix,
	create_table,
)

endglobal

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

# Subscripts

context "math()"
snippet '( [A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '( [A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet ub "underbrace" i
\underbrace{${1:${VISUAL}}}_{$0}
endsnippet

context "math()"
snippet ob "overbrace" i
\overbrace{${1:${VISUAL}}}_{$0}
endsnippet

# Powers

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet


# Fractions

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# sympy

snippet sympy "sympyblock " w
sympy ${1:${VISUAL}} sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

# mathematica

#priority 1000
#snippet math "mathematicablock" w
#math $1 math$0
#endsnippet
#
#priority 10000
#snippet 'math(.*)math' "math" wr
#`!p
#import subprocess
#code = match.group(1)
#code = 'ToString[' + code + ', TeXForm]'
#snip.rv = subprocess.check_output(['wolframscript', '-code', code])
#`
#endsnippet

# Postfix snippets

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{${1:${VISUAL}}}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{${1:${VISUAL}}}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

# matrices

context "math()"
pre_expand "create_matrix(snip, env='cases')"
snippet "cases(\d+)" "Generate cases of by *height*" r
endsnippet

context "math()"
pre_expand "create_table(snip, env='array')"
snippet "arr(\d+)x(\d+)" "Generate array of *width* by *height*" r
endsnippet

context "math()"
pre_expand "create_matrix(snip, env='matrix')"
snippet "mat(\d+)x(\d+)" "Generate matrix of *width* by *height*" r
endsnippet

context "math()"
pre_expand "create_matrix(snip, env='pmatrix')"
snippet "matp(\d+)x(\d+)" "Generate pmatrix of *width* by *height*" r
endsnippet

context "math()"
pre_expand "create_matrix(snip, env='bmatrix')"
snippet "matb(\d+)x(\d+)" "Generate bmatrix of *width* by *height*" r
endsnippet

context "math()"
pre_expand "create_matrix(snip, env='vmatrix')"
snippet "matv(\d+)x(\d+)" "Generate vmatrix of *width* by *height*" r
endsnippet

context "math()"
snippet rvec "row vector" iA
\begin{pmatrix}
	${1:x}_${2:1}, \ldots, $1_${2:n}
\end{pmatrix}
endsnippet

context "math()"
snippet cvec "column vector" iA
\begin{pmatrix}
	${1:x}_${2:1}\\\\
	\vdots\\\\
	$1_${2:n}
\end{pmatrix}
endsnippet

# math fonts

context "math()"
snippet mbf "mathbf" iA
\mathbf{${0:${VISUAL}}}
endsnippet

context "math()"
snippet mbb "mathbb" iA
\mathbb{${0:${VISUAL}}}
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{${0:${VISUAL}}}
endsnippet

context "math()"
snippet mfr "mathfrak" iA
\mathfrak{${0:${VISUAL}}}
endsnippet

context "math()"
snippet tt "text" iA
\text{${0:${VISUAL}}}
endsnippet

context "math()"
snippet mt "mathtt" iA
\mathtt{${0:${VISUAL}}}
endsnippet

# symbols

context "math()"
snippet => "implies" Ai
\implies
endsnippet

context "math()"
snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

context "math()"
snippet == "equals" iA
&= $1 \\\\
endsnippet

context "math()"
snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet ooo "\infty" iA
\infty
endsnippet

context "math()"
snippet <= "leq" iA
\leq 
endsnippet

context "math()"
snippet >= "geq" iA
\geq 
endsnippet

context "math()"
snippet EE "geq" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
context "math()"
snippet ** "cdot" iA
\cdot 
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

context "math()"
snippet >> ">>" iA
\gg
endsnippet

context "math()"
snippet << "<<" iA
\ll
endsnippet

context "math()"
snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet ap "approx" iA
\approx 
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

context "math()"
snippet || "mid" iA
\mid 
endsnippet

context "math()"
snippet CC "subset" Ai
\subset
endsnippet

context "math()"
snippet notin "not in " iA
\not\in
endsnippet

context "math()"
snippet inn "in " iA
\in
endsnippet

context "math()"
snippet Nn "cap" iA
\cap
endsnippet

context "math()"
snippet UU "cup" iA
\cup
endsnippet

context "math()"
snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

snippet <> "hokje" iA
\diamond 
endsnippet

snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

context "math()"
snippet R0+ "R0+" iA
\\R_0^+
endsnippet

context "math()"
snippet HH "H" iA
\mathbb{H}
endsnippet

context "math()"
snippet DD "D" iA
\mathbb{D}
endsnippet

snippet NN "n" iA
\N
endsnippet

snippet OO "emptyset" iA
\O
endsnippet

snippet RR "real" iA
\R
endsnippet

snippet QQ "Q" iA
\Q
endsnippet

snippet ZZ "Z" iA
\Z
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet

context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

# functions

context "math()"
snippet ceil "ceil" iA
\left\lceil ${1:${VISUAL}} \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor ${1:${VISUAL}} \right\rfloor$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{${1:${VISUAL}}}$0
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

context "math()"
snippet norm "norm" iA
\|${1:${VISUAL}}\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

# expressions

context "math()"
snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

context "math()"
snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

context "math()"
snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

# delimiters

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet
